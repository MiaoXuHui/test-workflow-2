# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  branches:
    include:
      - master

variables:
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    disable.coverage.autogenerate: 'true'

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
  - job: Build
    displayName: Build
    steps:
    - checkout: self
      displayName: 'Checkout test-workflow'
    - script: |
        sudo apt-get install -y golang-go
        sudo apt-get install -y gcovr
        sudo apt-get install python3-pip
        sudo pip3 install pytest pytest-cov
        cat $(which pytest)
        pytest --version
        pytest --help
      displayName: 'Install packages'
    - script: |
        set -ex
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/ubuntu/20.04/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-5.0
      displayName: 'Install .NET CORE'
    - script: |
        cd cpp
        ./build.sh
        gcovr -r $(pwd) --exclude-unreachable-branches  -x -o coverage.xml
        mkdir -p htmlcov
        gcovr -r $(pwd) --html --html-details -o htmlcov/index.html
      displayName: 'Build cpp'
    - script: |
        cd python
        python3 setup.py bdist_wheel
        pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
      displayName: 'Build python'
    - script: |
        cd golang
        go get github.com/axw/gocov/...
        go get github.com/AlekSi/gocov-xml
        export PATH=$PATH:$(go env GOPATH)/bin
        go test -race -coverprofile=coverage.txt -covermode=atomic
        gocov convert coverage.txt | gocov-xml -source $(pwd) > coverage.xml
        mkdir -p htmlcov
        go tool cover -html=coverage.txt -o htmlcov/coverage.html
      displayName: 'Build golang'
    - script: |
        sudo pip install diff-cover
        target_branch=$(System.PullRequest.TargetBranch)
        compare_branch=origin/${target_branch#refs/heads/}
        mkdir -p diff-cover/htmlcov
        diff-cover **/coverage.xml --compare-branch=$compare_branch --html-report=diff-cover/htmlcov/index.html --json-report=diff-cover/diff-cover.json
        echo "##vso[task.setvariable variable=disable.coverage.autogenerate;]true"

        base64pat=$(printf "%s"":$SYSTEM_ACCESSTOKEN" | base64)
        header1="Authorization: Basic $base64pat"
        header2="Content-Type:application/json-patch+json"
        data="[{\"op\": \"add\", \"path\": \"/Alias\", \"value\": \"Frabrikam\"}]"
        curl -X PATCH -H "$header1" -H "$header3" -d "$data" "$uri"
      condition: eq(variables['Build.Reason'], 'PullRequest')
      displayName: "Diff coverage"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    - task: PythonScript@0
      inputs:
        scriptSource: inline
        script: |
          import json
          cover = {}
          with open("diff-cover/diff-cover.json", "r") as content:
            cover=json.load(content.read())
          properties = {
            'pullRequestId': $(System.PullRequest.PullRequestNumber),
            'repoUri': '$(System.PullRequest.SourceRepositoryURI)',
            'targetBranch': '$(System.PullRequest.TargetBranch)'
            'sourceCommitId': '$(system.pullRequest.sourceCommitId)',
            'sourceVersion': '$(Build.SourceVersion)',
            'jobName': '$(System.JobName)',
            'stageName': '$(System.StageName)',
            'jobAttempt': '$(System.JobAttempt)',
            'cover': cover,
          }
      displayName: 'Update Build coverage'
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/python/junit/test-results.xml'
        testRunTitle: Python
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
      displayName: 'Publish Python test results'
    - script: |
        # A workaround to merge converage files for full coverage
        sudo apt-get install npm
        npm install cobertura-merge
      displayName: 'Install cobertura-merge'
    - script: |
        node_root=$(npm list --depth=0 2>/dev/null | head -n 1)
        $node_root/node_modules/.bin/cobertura-merge -o coverage.xml cpp=cpp/coverage.xml python=python/coverage.xml golang=golang/coverage.xml
      displayName: "Merge coverage"
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/diff-cover/htmlcov'
      displayName: 'Publish coverage'
